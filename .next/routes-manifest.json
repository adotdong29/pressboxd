{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/forum/[category]",
      "regex": "^/forum/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPcategory": "nxtPcategory"
      },
      "namedRegex": "^/forum/(?<nxtPcategory>[^/]+?)(?:/)?$"
    },
    {
      "page": "/forum/[category]/[postId]",
      "regex": "^/forum/([^/]+?)/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPcategory": "nxtPcategory",
        "nxtPpostId": "nxtPpostId"
      },
      "namedRegex": "^/forum/(?<nxtPcategory>[^/]+?)/(?<nxtPpostId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/game/[id]",
      "regex": "^/game/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/game/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/sports/[sport]",
      "regex": "^/sports/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPsport": "nxtPsport"
      },
      "namedRegex": "^/sports/(?<nxtPsport>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/app",
      "regex": "^/app(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/app(?:/)?$"
    },
    {
      "page": "/auth/callback",
      "regex": "^/auth/callback(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/callback(?:/)?$"
    },
    {
      "page": "/forum",
      "regex": "^/forum(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/forum(?:/)?$"
    },
    {
      "page": "/forum/create",
      "regex": "^/forum/create(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/forum/create(?:/)?$"
    },
    {
      "page": "/friends",
      "regex": "^/friends(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/friends(?:/)?$"
    },
    {
      "page": "/friends/add",
      "regex": "^/friends/add(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/friends/add(?:/)?$"
    },
    {
      "page": "/login",
      "regex": "^/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/login(?:/)?$"
    },
    {
      "page": "/onboarding",
      "regex": "^/onboarding(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/onboarding(?:/)?$"
    },
    {
      "page": "/profile",
      "regex": "^/profile(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/profile(?:/)?$"
    },
    {
      "page": "/search",
      "regex": "^/search(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/search(?:/)?$"
    },
    {
      "page": "/signup",
      "regex": "^/signup(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/signup(?:/)?$"
    },
    {
      "page": "/test",
      "regex": "^/test(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/test(?:/)?$"
    }
  ],
  "dataRoutes": [
    {
      "page": "/forum/[category]",
      "routeKeys": {
        "nxtPcategory": "nxtPcategory"
      },
      "dataRouteRegex": "^/_next/data/xbq51ZmDrH0SJMiNRfW86/forum/([^/]+?)\\.json$",
      "namedDataRouteRegex": "^/_next/data/xbq51ZmDrH0SJMiNRfW86/forum/(?<nxtPcategory>[^/]+?)\\.json$"
    },
    {
      "page": "/forum/[category]/[postId]",
      "routeKeys": {
        "nxtPcategory": "nxtPcategory",
        "nxtPpostId": "nxtPpostId"
      },
      "dataRouteRegex": "^/_next/data/xbq51ZmDrH0SJMiNRfW86/forum/([^/]+?)/([^/]+?)\\.json$",
      "namedDataRouteRegex": "^/_next/data/xbq51ZmDrH0SJMiNRfW86/forum/(?<nxtPcategory>[^/]+?)/(?<nxtPpostId>[^/]+?)\\.json$"
    }
  ],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}